# Las librerías solo se instalan 1 vez (por computador). Para eso se usa install.packages()
install.packages("tidyverse")
install.packages("knitr")
# Para usar una librería, es necesario activarla usando la función library()
library(tidyverse) # Esta librería la usaremos mucho!!!
library(knitr)
library(knitr)
data(iris) # iris es un dataset que viene incluído por defecto en R
View(iris)
dim(iris) # n filas y columnas
str(iris) # Ver la estructura de los datos
names(iris) # Para ver los nombres de las variables
head(iris, 3) # Puedes indicarle a head() el n° de observaciones ue quieres ver. Por defecto muestra las primeras 6
tail(iris) # Con tail() puedes ver las últimas ovservaciones
summary(iris) # Análisis con estadígrafos básicos para variables numéricas
glimpse(iris)
min(iris$Sepal.Length) # seleccionar una variable con $
max(iris$Sepal.Length) # Seleccionar el máximo
unique(iris$Species) # listar valores únicos
table(iris$Species) # conteo de variables
table(iris$Species) # conteo de variables [únicas]
dim(Iris) # cuidado con las mayúsculas!
?glimpse
example(colnames)
example(colnames)
vignette(all = FALSE)
vignette(all = TRUE)
vignette("grid")
plot(iris)
hist(iris$Sepal.Length,
main = "Histogram Sepal Length",
xlab = "Length (cms)",
col = "red") # Se puede cambiar el color
plot(iris)
hist(iris$Sepal.Width,
main = "Histogram Sepal Width",
xlab = "Width (cms)",
col = "blue")
hist(iris$Sepal.Width,
main = "Histogram Sepal Width",
xlab = "Width (cms)",
col = "yellow")
# Usando uan de las librerías del tidyverse: dplyr
# Fíjate en el uso del pipe %>%. Se puede leer así como "dado lo anterior, ahora haz lo siguiente"
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Length)) %>%
arrange(avg)
# Usando uan de las librerías del tidyverse: dplyr
# Fíjate en el uso del pipe %>%. Se puede leer así como "dado lo anterior, ahora haz lo siguiente"
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Length)) %>%
arrange(avg)
# Usando uan de las librerías del tidyverse: dplyr
# Fíjate en el uso del pipe %>%. Se puede leer así como "dado lo anterior, ahora haz lo siguiente"
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Length)) %>%
arrange(avg)
data_frame(variable = names(iris)) %>% # Al usar data_frame() da un Warning. Cámbialo por tibble()
mutate(class = map(iris, typeof)) %>%
kable()
data_frame(variable = names(iris)) %>% # Al usar data_frame() da un Warning. Cámbialo por tibble()
mutate(class = map(iris, typeof)) %>%
kable()
# Usando uan de las librerías del tidyverse: dplyr
# Fíjate en el uso del pipe %>%. Se puede leer así como "dado lo anterior, ahora haz lo siguiente"
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Length)) %>%
arrange(avg)
# Usando uan de las librerías del tidyverse: dplyr
# Fíjate en el uso del pipe %>%. Se puede leer así como "dado lo anterior, ahora haz lo siguiente"
iris %>%
group_by(Species) %>%
summarise(avg = mean(Sepal.Length)) %>%
arrange(avg)
data_frame(variable = names(iris)) %>% # Al usar data_frame() da un Warning. Cámbialo por tibble()
mutate(class = map(iris, typeof)) %>%
kable()
# Formas de segmentar
# Fíjate en el uso de == para indicar equivalencia.
setosa <- iris %>%
filter(Species == "setosa")
setosa2 <- iris[iris$Species == "setosa", ] # Es lo mismo que lo anterior
%>%
View(setosa)
colnames(setosa)
# FORMA 1
colnames(setosa) <-  c("largo_sepalo", "ancho_sepalo", "largo_petalo", "ancho_petalo", "especie")
# FORMA 2
colnames(setosa)[colnames(setosa) == "largo_sepalo"] <- "Largo2"
# FORMA 3
names(setosa)[3] <- "Petalo2"
# Gráficos con R base
# Si bien no son tan lindos, son rápidos de generar y permiten obtener información de los datos
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, pch = 19) # Puedes usar otros plot character (pch)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, pch = 17) # Puedes usar otros plot character (pch)
# Gráficos con R base
# Si bien no son tan lindos, son rápidos de generar y permiten obtener información de los datos
plot(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, pch = 17) # Puedes usar otros plot character (pch)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species, pch = 17) # Puedes usar otros plot character (pch)
plot(iris$Petal.Length, iris$Petal.Width,
col = iris$Species,
pch = 17,
xlab = 'Longitud del pétalo',
ylab = 'Ancho del pétalo')
title(main = 'IRIS',
sub = 'Exploración de los pétalos según especie',
col.main = 'blue',
col.sub = 'blue')
legend("bottomright",
legend = levels(iris$Species),
col = unique(iris$Species),
ncol = 3,
pch = 19,
bty = "n")
boxplot(Petal.Length ~ Species,
data = iris,
notch = T)
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_manual(name = "Especie", values = c('#a6cee3','#1f78b4','#b2df8a'))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_viridis_d(name = "Especie")
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip()
?notch
??notch
boxplot(Petal.Length ~ Species,
data = iris,
notch = T) #notch???
boxplot(Petal.Length ~ Species,
data = iris,
notch = F) #notch???
boxplot(Petal.Length ~ Species,
data = iris,
notch = T) #notch???
boxplot(Petal.Length ~ Species,
data = iris,
notch = F) #notch???
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_manual(name = "Especie", values = c('#a6cee3','#1f78b4','#b2df8a'))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_viridis_d(name = "Especie")
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip()
# Se puede guardar en un objeto un gráfico
p <- ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(aes(color = Species)) # Cuidado con el orden de las capas. Intenta cambiando el orden de la línea 161 y 162
ggsave(p, filename = "boxplot_especies.png",
width = 20,
height = 15,
units = "cm")
df <- data.frame(edad, ciudad)
write.csv(df, "ciudades.csv", row.names = FALSE) # Averigua qué sucede si no se usa el argumento row.names
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_viridis_d(name = "Especie")
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_manual(name = "Especie", values = c('#a6cee3','#1f78b4','#b2df8a'))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot(notch = T, aes(fill = Species)) +
scale_fill_viridis_d(name = "Especie")
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip()
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip()
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip() # el flip
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3')
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3')
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3')
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3')
?aes
?geom_jitter
?aes
?geom_jitter
# Se puede guardar en un objeto un gráfico
p <- ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_boxplot() +
geom_jitter(aes(color = Species)) # Cuidado con el orden de las capas. Intenta cambiando el orden de la línea 161 y 162
View(p)
p
p
?geom_jitter
p
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_point(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_jitter(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_point(aes(shape = Species))
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') +
coord_flip() # el flip
ggplot(iris, aes(x = Species, y = Sepal.Width)) +
geom_violin(fill = '#a6cee3') + #mayor_densidad
coord_flip() # el flip
p
ggsave(p, filename = "boxplot_especies.png",
width = 20,
height = 15,
units = "cm")
ggsave(p, filename = "modulo1_boxplot_especies.png",
width = 20,
height = 15,
units = "cm")
# Dataframe
# Crear un dataframe
edad <- c(2, 4, 67, 33, 2)
ciudad <- c("Santiago", "Talca", "Puerto Montt", "Santiago", "Arica")
df <- data.frame(edad, ciudad)
View(df)
write.csv(df, "ciudades.csv", row.names = FALSE) # Averigua qué sucede si no se usa el argumento row.names
write.csv(df, "ciudades2.csv", row.names = TRUE)
write.csv(df, "ciudades3.csv")
View(p)
view(iris)
install.packages("tidyverse") # Instala la librería si aún no lo has hecho
install.packages("tidyverse")
library(tidyverse)
x <- c(2, 4, 6, 8)
y <- x + 8
# Con la función class() se puede averiguar el tipo de dato
class(x)
edades <- c(13, 34, 24, 87, 9, 55, 45)
edades
data(uspop) # Datos de población de USA
view(uspop)
# de dónde sacó el uspop? Viene incluido en R
?uspop
# Hacer subseting de un vector
uspop[c(2, 5, 7)]
x <- c(4, 7, 10, 13)
uspop[x]
data("iris")
# Subseting de dataframe
iris["Species"]
iris$Species
iris[, 3] # Indicar posición
iris[, "Petal.Length"] # Indicar explícitamente el nombre de la variable
iris[2:5, c(1, 5)]
iris$Petal.Length
# Subseting de dataframe
iris["Species"]
iris$Species
iris[, 3] # Indicar posición
view("iris")
view(iris)
iris[, 3] # Indicar posición
iris[, "Petal.Length"] # Indicar explícitamente el nombre de la variable
iris[2:5, c(1, 5)]
iris[2:5, c(1, 5)] # De la fila 2 a la 5 muestra columna 1 y 5
iris$Petal.Length
# Creemos un dataframe
nombres <- c("Paulo", "María", "Diego", "Marcela", "Soledad")
edades <- c(30, 22, 45, 19, NA)
curso <- data.frame(nombres, edades)
glimpse(curso)
str(curso)
?str
View(curso)
glimpse(curso)
str(curso)
glimpse(iris)
str(iris)
data("HairEyeColor")
?HairEyeColor
data("HairEyeColor")
view(HairEyeColor)
HairEyeColor
HairEyeColor
HairEyeColor[,,1]
HairEyeColor[,, "Male"] # Lo mismo que lo anterior, pero especificando el nombre de la tabla
HairEyeColor[,,2]
HairEyeColorDF = data.frame(HairEyeColor)
View(HairEyeColorDF)
HairEyeColorDF[1,,]
HairEyeColor[1,,]
HairEyeColor[2,,] #Organizar por marron
# Tranformar la tabla de contingencia a tidydata
# Librería epitools y su función expand.table() sirve para pasar de un array a un data frame
library(epitools)
H <- expand.table(HairEyeColor)
H <- expand.table(HairEyeColor)
View(H)
H <- expand.table(HairEyeColor) #expandió
x <- list(rep("pepe", 3), 1:20)
View(x)
View(x)
x[[1]]
class(x[[1]])  # "character"
length(x[[1]]) # 3
x[[2]]
class(x[[2]])  # "integer"
length(x[[2]]) # 20
# Las listas puedes incluir cualquier tipo de dato
list_data <- list("Red", "Green", c(21, 32, 11), TRUE, 51.23, 119.1)
View(list_data)
# is.list function
a <- list(1, 2, 3)
b <- list(c("Jan", "Feb", "Mar"))
c <- list(matrix(c(1, 2, 3, 4, 5)))
d <- list(list("green", 12.3))
# Usando la función is.list()
is.list(a)
is.list(b)
is.list(c)
is.list(d)
merged_list <- c(a, b, c, d)
View(merged_list)
# Asignar tipo de dato con función as()
as.character(5)
as.logical(TRUE)
as.numeric("siete")
as.numeric(7)
# Averiguar tipo de dato
class(iris)
class("academia")
is.logical(4)
is.character(4)
# Veamos el caso especial de los factores
as.factor(5)
as.factor("cinco")
factor_cinco <- as.factor("cinco")
?factor
# Coercionar de factor a character
as.character(factor_cinco)
racter
as.character(factor_cinco)
# Coercionar de factor a character
as.character(factor_cinco)
as.numeric(factor_cinco)
# Cambio de tipo de datos
puntos <- c("North", "South", "East", "East")
puntos
puntos2 <- factor(puntos)
# Creando un factor
metros <- factor(c(29, 28, 210, 28, 29))
levels(metros)
# Convertir factor a numeric
as.numeric(metros) #Mira la diferencia
metros2 <- as.numeric(as.character(metros))
str(metros2)
# Crear un vector
x <- c("female", "male", "male", "female")
# Usar as.factor() para convertir vector a un factor
as.factor(x)
# Aritméticos
5 * 3
6 + 4
8 - 5
7 / 3
5 %% 3 # Devuelve el residuo
4 %% 2
3 ^ 2 # Potencia (elevado a...)
4 + "tres"
3 * NA # Fíjate qué pasa con los NA
7 + NA
# Relacionales
5 > 4
4 == 4
"casa" != "perro"
"casa" > "auto" # Compara la posición alfabética de las letras
# Lógicos
# Todos los valores numéricos mayores a 0 son coercionados a TRUE, 0 es coercionado a FALSE
5 | 3
0 & 3
5 | 0
!(FALSE | FALSE)
# Orden de los operadores
5 * 3 + (4 ^ 2) + (FALSE | TRUE) # Prueba a hacer los tuyos!!
class(TRUE)
as.numeric(TRUE)
iris %>%
pivot_longer(cols = -Species,
names_to = "Type",
values_to = "value")
iris %>%
pivot_longer(cols = -Species,
names_to = "Type",
values_to = "value")
iris %>%
pivot_longer(cols = -Species,
names_to = c("part", "dimension"),
names_pattern = "(.*)\\.(.*)", # Expresión regular
values_to = "value")
iris %>%
pivot_longer(cols = -Species,
names_to = c("part", "dimension"),
names_pattern = "(.*)\\.(.*)", # Expresión regular
values_to = "value")
