## Academia OpenSalud LAB Ciencia de Datos
## Sesión Tipos de datos, estructura y operadores
## Autor: Paulo Villarroel


install.packages("tidyverse") # Instala la librería si aún no lo has hecho
library(tidyverse)

# Tipo de datos -----------------------------------------------------------

## Vectores

x <- c(2, 4, 6, 8)
y <- x + 8


# Con la función class() se puede averiguar el tipo de dato
class(x)
edades <- c(13, 34, 24, 87, 9, 55, 45)
edades

data(uspop) # Datos de población de USA
view(uspop)

# de dónde sacó el uspop? Viene incluido en R
?uspop

# Hacer subseting de un vector
uspop[c(2, 5, 7)]
x <- c(4, 7, 10, 13)
uspop[x]


## Dataframes

data("iris")
view(iris)

# Subseting de dataframe
iris["Species"]
iris$Species #Más bonito de ver?
iris[, 3] # Muestra datos de la columna 3
iris[, "Petal.Length"] # Y si te sabes el nombre, colocas este
iris[2:5, c(1, 5)] # De la fila 2 a la 5 muestra columna 1 y 5
iris$Petal.Length

# Creemos un dataframe
nombres <- c("Paulo", "María", "Diego", "Marcela", "Soledad")
edades <- c(30, 22, 45, 19, NA)

curso <- data.frame(nombres, edades)
glimpse(curso)
str(curso) #Muestra todo más resumido

?str
glimpse(iris)
str(iris)

## Una tabla de contigencia (untidy data)

?HairEyeColor

data("HairEyeColor")
view(HairEyeColor)
HairEyeColor
HairEyeColor[,,1]
HairEyeColor[,, "Male"] # Lo mismo que lo anterior, pero especificando el nombre de la tabla

HairEyeColor[,,2]

HairEyeColorDF = data.frame(HairEyeColor)

HairEyeColor[1,,]
HairEyeColor[2,,] #Organizar por marron

# Tranformar la tabla de contingencia a tidydata
# Librería epitools y su función expand.table() sirve para pasar de un array a un data frame
library(epitools)
H <- expand.table(HairEyeColor) #expandió

## Listas

x <- list(rep("pepe", 3), 1:20)
x[[1]]
class(x[[1]])  # "character"
length(x[[1]]) # 3

x[[2]]
class(x[[2]])  # "integer"
length(x[[2]]) # 20

# Las listas puedes incluir cualquier tipo de dato
list_data <- list("Red", "Green", c(21, 32, 11), TRUE, 51.23, 119.1)

# is.list function 
a <- list(1, 2, 3)
b <- list(c("Jan", "Feb", "Mar")) 
c <- list(matrix(c(1, 2, 3, 4, 5))) 
d <- list(list("green", 12.3)) 

# Usando la función is.list()
is.list(a)
is.list(b) 
is.list(c)
is.list(d) 

merged_list <- c(a, b, c, d) 


# Coerción ----------------------------------------------------------------

# Esta sección la dejo para que puedas revisarla más tarde con la documentación que estará disponible.
# Te será útil para los módulos de limpieza de datos, transformación y analisis exploratorio.

# Asignar tipo de dato con función as()
as.character(5)
as.logical(TRUE)
as.numeric("siete")

as.numeric(7)

# Averiguar tipo de dato
class(iris)
class("academia")
is.logical(4)
is.character(4)

# Veamos el caso especial de los factores
as.factor(5)
as.factor("cinco")
factor_cinco <- as.factor("cinco")

?factor

# Coercionar de factor a character
as.character(factor_cinco)
as.numeric(factor_cinco)

# Cambio de tipo de datos
puntos <- c("North", "South", "East", "East") 
puntos
puntos2 <- factor(puntos)
puntos2
as.numeric(puntos2) # Los ordena alfabeticamente

# Creando un factor
metros <- factor(c(29, 28, 210, 28, 29))
levels(metros) #ordena, unicos

# Convertir factor a numeric
as.numeric(metros) #Mira la diferencia
#te ordena los datos y te dice el "orden" de importancia

metros2 <- as.numeric(as.character(metros))
str(metros2)

# Crear un vector
x <- c("female", "male", "male", "female") 

# Usar as.factor() para convertir vector a un factor 
as.factor(x) #Ve las repeticiones y te dice los niveles dependiendo de ello


# Operadores --------------------------------------------------------------

# Aritméticos
5 * 3
6 + 4
8 - 5
7 / 3
5 %% 3 # Devuelve el residuo
4 %% 2
3 ^ 2 # Potencia (elevado a...)
4 + "tres"
3 * NA # Fíjate qué pasa con los NA
7 + NA

# Relacionales
5 > 4
4 == 4
"casa" != "perro"
"casa" > "auto" # Compara la posición alfabética de las letras

# Lógicos
# Todos los valores numéricos mayores a 0 son coercionados a TRUE, 0 es coercionado a FALSE
5 | 3
0 & 3
5 | 0
!(FALSE | FALSE)

# Orden de los operadores
5 * 3 + (4 ^ 2) + (FALSE | TRUE) # Prueba a hacer los tuyos!!
class(TRUE)
as.numeric(TRUE)


# Tidy data ---------------------------------------------------------------

# Tarea para la casa
# Transformar a tidydata con pivot_longer() de la librería tidyr
# Puedes ver info en https://tidyr.tidyverse.org/ 

iris %>% 
  pivot_longer(cols = -Species, 
                      names_to = "Type",
                      values_to = "value")

# Separar campos al pivotear
# Acá usaremos una expresión regular (regex), pero solo para que veas las posibilidades que ofrece
# Las expresiones regulares no son tan fáciles de entender, pero abren un espacio gigante de posibilidades

data(iris) 
view(iris)
?pivot_longer

# pivot_longer() pone filas como columnas, por qué es tidy data? no sé, no entiendo la definición de tidy data

iris %>% 
  pivot_longer(cols = -Species, 
                      names_to = c("part", "dimension"),
                      names_pattern = "(.*)\\.(.*)", # Expresión regular
                      values_to = "value")

# Cheat sheet regex https://rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf
